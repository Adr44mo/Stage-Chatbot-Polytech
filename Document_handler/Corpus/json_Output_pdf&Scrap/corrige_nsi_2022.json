{
  "source": "scraped_geipi",
  "file_name": "corrige_nsi_2022.pdf",
  "pdf_path": "/home/adrien/Documents/poly4emeAnee/Projet-Stage/Projet-Chatbot/Document_handler/scraping/data_sites/geipi_polytech/pdf_scrapes/corrige_nsi_2022.pdf",
  "specialty": "NA",
  "content": "1 / 2 Etats possibles pour Léa Etats possibles pour son adversaire probas de gagner pour l'adversaire probas de gagner pour Léa Etat 1 Etat 2 Etat 0 Etat 0­0 0,6 Etat 0­1 0,05 Etat 0­3 0,3 Etat 1­0 0,4 Etat 2­0 0,05 Etat 2­1 0,3 Document réponse de Numérique et Sciences Informatiquesdef proba_rec(j, etat, nb): a = etats_suiv(3-j, etat) if nb <= 1 or len(a) == 0 : return proba(j, M) else: p = 0.0 for i in range(0, len(a)) : pa = proba_rec(3-j, a[N],O) if pa > p : P return Q def emma(j, coups): (b, p) = (0, 0.0) for i in range(0, len(coups)) : pc = proba_rec(j, coups[R], 3) if pc > p : (b, p) = S returni score( j, coups[ b[0] ]) [i] b.append(i) alea( len(b) ) k proba( 3 - j , a[ba] ) ba = k p i b 0.4 0.6 0.7 etat i nb - 1 p = pa 1 - p i ( i , pc ) b 2 / 2 II-1. [_____ ,_____ ,_____ ,_____ ,_____ ,_____ ,_____ ,_____ ,_____ ,_____ ,_____] II-2. [_____ ,_____ ,_____ ,_____ ,_____ ,_____ ,_____ ,_____ ,_____ ,_____ ,_____] II-3. def fille(etu): return M == 'F' M ..................................................................... II-4. def suivante(etus, i): if i >= len(etus) or fille(etus[i]): return M return suivante(etus, N) M ..................................................................... N ..................................................................... II-5. def forcer_parite(etus): etus = etus.copy() (classt, nbf) = ([], 0) idxf = suivante(etus, 0) while etus: if fille( M ): classt.append(etus.pop(0)) nbf = nbf + 1 idxf = suivante(etus, N) elif nbf < O and idxf < P : classt.append(etus.pop( Q )) nbf = nbf + 1 idxf = suivante(etus, R ) else: classt.append(etus.pop(0)) idxf = idxf - 1 return classtdef mariages_stables(prefs, classts, quotas): prefs = prefs.copy() affectation = { sport: [] for sport in classts.keys() } for M in N : affectation_etudiant( O , P , Q , R , quotas) return affectationetu[0] i i + 1 etus[0] 0 len( classt ) + 1 len( etus ) idxf idxf affectation[ i ] i , etu prefs[ etu ][ 0 ] affect[ sport ] etu 0 classts[ sport ] elimine xxx affectation prefs prefs xxx classts",
  "metadata": {
    "title": "corrige_nsi_2022.pdf",
    "auteurs": [],
    "date": null,
    "title_2": "Corrige nsi 2022",
    "url": "https://www.geipi-polytech.org/annales-du-concours-geipi-polytech/",
    "last_modified": "2022-05-05T13:34:16",
    "hash": "3cb9ee9f7b756ad3d9d50f56b58681540ee9b29aac5d3b94cc8fec1e16d9f3a2",
    "scraped_at": "2025-06-18T11:03:20.508091"
  }
}