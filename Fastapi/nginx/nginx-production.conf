# Configuration Nginx PRODUCTION pour le chatbot Polytech avec HTTPS
# Ce fichier sera automatiquement configuré par init.sh
user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logs spécifiques pour la production
    access_log /var/log/nginx/stage-chatbot-access.log;
    error_log /var/log/nginx/stage-chatbot-error.log warn;

    # Gzip compression optimisée
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_min_length 1000;
    gzip_types 
        text/plain 
        text/css 
        text/xml
        text/javascript
        application/json 
        application/javascript 
        application/xml+rss 
        application/atom+xml 
        image/svg+xml;

    # Sécurité headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=5r/s;

    # Redirection HTTP vers HTTPS
    server {
        listen 80;
        server_name SERVER_DOMAIN SERVER_IP;
        return 301 https://$server_name$request_uri;
    }

    # Configuration HTTPS PRODUCTION
    server {
        listen 443 ssl http2;
        server_name SERVER_DOMAIN SERVER_IP;
        
        # Certificats SSL (chemins remplacés par init.sh)
        ssl_certificate SSL_CERT_PATH;
        ssl_certificate_key SSL_KEY_PATH;
        
        # Configuration SSL sécurisée
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # Optimisations SSL
        ssl_early_data on;
        ssl_session_tickets off;
        
        # Limites pour les uploads de fichiers volumineux
        client_max_body_size 100M;
        client_body_timeout 120s;
        client_header_timeout 120s;
        
        # Buffers pour améliorer les performances
        client_body_buffer_size 1M;
        client_header_buffer_size 1k;
        large_client_header_buffers 4 16k;

        # Frontend - Servir les fichiers statiques buildés
        location / {
            root PROJECT_PATH/Fastapi/frontend/dist;
            index index.html;
            try_files $uri $uri/ /index.html;
            
            # Cache pour les assets statiques
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                access_log off;
            }
            
            # Headers de sécurité pour les pages HTML
            location ~* \.html$ {
                expires 0;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
            }
        }

        # Protection IP pour /login
        location /login {
            allow 134.157.0.0/16;
            allow 100.106.28.24;
            allow 100.106.245.61;
            deny all;
            root PROJECT_PATH/Fastapi/frontend/dist;
            index index.html;
            try_files $uri $uri/ /index.html;
        }

        # Protection IP pour /admin
        location /admin {
            allow 134.157.0.0/16;
            deny all;
            root PROJECT_PATH/Fastapi/frontend/dist;
            index index.html;
            try_files $uri $uri/ /index.html;
        }

        # Backend API avec rate limiting
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://127.0.0.1:BACKEND_PORT/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # Timeouts spécifiques pour les API (plus longs pour l'IA)
            proxy_connect_timeout 30s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            proxy_request_buffering off;
            proxy_buffering off;
            
            # Headers CORS si nécessaire
            add_header Access-Control-Allow-Origin "$http_origin" always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
            add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
            
            # Gérer les requêtes OPTIONS pour CORS
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "$http_origin";
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, DELETE";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
        }

        # Endpoint de santé (monitoring)
        location /health {
            access_log off;
            return 200 "OK\n";
            add_header Content-Type text/plain;
        }

        # Blocage des tentatives d'accès aux fichiers sensibles
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~* \.(env|log|conf)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Gestion des erreurs personnalisées
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            root PROJECT_PATH/Fastapi/frontend/dist;
            internal;
        }
        
        location = /50x.html {
            root PROJECT_PATH/Fastapi/frontend/dist;
            internal;
        }
    }
}
